"Hello world!" ↲

repeat [] 1000000 times

"Finished!" \n ; the \n doesn't work

1, 2, 3 ↲
1 _. 2 _. 3 ↲

print "Goodbye world!" ↲

"not true is ", not (true) ↲

a : 1
if (a = 1)
	"a is equal to 1" ↲

b : true

{"a is ", a, ", b is ", b} ↲
if ((a != 1) or (b))
	"a is not 1 or b is true" ↲

(for each (value) in {1, 2, 3, 4} do
	(value) _
	if (value = 2)
		return "Wow!"
) _

for each (count) from 5 to 10 do
	(count) _
new line

repeat
	"Hi" _
... 10 times
new line

x : 1
(repeat [(x) _. x : x + 1] until [x = 10]) ↲

while [x > 0] do
	(x × x) _
	x : x - 1
new line

evens : filter (1 to 10) by (value) where [(value) is divisible by 2]
length of (evens) ↲
evens ↲
for each (i) in (evens) do [(i) _]
new line

(keep (x) from (1 to 100) until [x = 20]) as string ↲

cubes : apply
	i × i × i
... to each (i) from (1 to 20)

for each (value) in (cubes) do
	(value) _
new line

x : 1
ten : apply
	inc (x)
... 10 times
(type of (ten)) ↲
for each (i) in (ten) do
	(i) _
new line

for each (i) from 1 to 10 do
	(i × i × i) _
new line

for each (i) from 1 to 10 do
	if (i > 5)
		return
	(i) _
new line

nested : {
	1 to 4
	{2, 4, 6, 8}
	{3, 6, 9, 12}
}

for each (row) in (nested) do
	for each (item) in (row) do
		(item × item) _
	new line
new line

- A person class
make person called (name) of age (age) with (colour) hair :
	"making a person object" ↲
	create
		name : name
		age : age
		hair : colour

		getter/setter
			age

		getter
			name

		setter
			hair

		(me) age : ; overwrites the age getter
			age × 2

		(me) age (years) : ; overwrites the age setter
			age : years + 100

		print person (me) :
			name,", age ",age,", hair ",hair ↲
			private add to age

		private add to age :
			age : age + 1

- Another class
another class with same method name :
	create
		print person (me) :
			"I am anonymous." ~

		call (me) :
			print person (me)
			" From another method." ↲

Robert : make person called "Robert" of age 64 with "grey" hair
{Robert's name, " ", Robert's age} ↲
print person (Robert)
Stephanie : make person called "Stephanie" of age 61 with "brown" hair
print person (Stephanie)
print person (Robert)
print person (Stephanie)
Stephanie's name, " ", Stephanie's age ↲

print person (another class with same method name). new line
Robert's age : 11. Robert's hair : "blue"
print person (Robert)
Robert's name, " ", Robert's age ↲ ; possessives are syntactic sugar
(Robert) name, " ", (Robert) age ↲ ; so these two lines are the same

copy : another class with same method name
call (copy)

repeat
	"hi" _
... 5 times. new line

i : 1
repeat [(i) _. i : i + 1] until [i = 10]
result : while
	i ≥ 0
… do
	(i) _. i : i - 1

result ↲ ; this prints -1

a : {
	1
	2
	3
	4
}

for each (item) in (a) do
	(item) _

person : {name : "Robert", age : 65}
person ↲
person{name} : "blah"
person ↲
