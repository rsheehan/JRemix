"Hello world!" ↲

repeat [] 1000000 times

"Finished!" \n ; the \n now works

1, 2, 3 ↲
1 _. 2 _. 3 ↲

print "Goodbye world!" ↲

"not true is ", not true ↲

'A' : 1
if ('A' = 1)
	"A is equal to 1" ↲

'B' : true

"A is ", 'A', ", B is ", 'B' ↲
if (('A' != 1) or 'B')
	"A is not 1 or B is true" ↲

(for each 'value' in { 1, 2, 3, 4 } do
	'value' _
	if ('value' = 2)
		return "Wow!"
) _

for each 'count' from 5 to 10 do
	'count' _
new line

repeat
	"Hi" _
... 10 times
new line

'X' : 1
(repeat ['X' _. 'X' : 'X' + 1] until ['X' = 10]) ↲

while ['X' > 0] do
	('X' × 'X') _
	'X' : 'X' - 1
new line

'evens' : filter (1 to 10) by 'value' where ['value' is divisible by 2]
length of 'evens' ↲
'evens' ↲
for each 'I' in 'evens' do ['I' _]
new line

keep 'X' from (1 to 100) until ['X' = 20] ↲

'cubes' : apply
	'I' × 'I' × 'I'
... to each 'I' from (1 to 20)

for each 'value' in 'cubes' do
	'value' _
new line

'X' : 1
'ten' : apply
	inc 'X'
... 10 times
(type of 'ten') ↲
for each 'I' in 'ten' do
	'I' _
new line

for each 'I' from 1 to 10 do
	('I' × 'I' × 'I') _
new line

for each 'I' from 1 to 10 do
	if ('I' > 5)
		return
	'I' _
new line

'nested' : {
	1 to 4
	{2, 4, 6, 8}
	{3, 6, 9, 12}
}

for each 'row' in 'nested' do
	for each 'item' in 'row' do
		('item' × 'item') _
	new line
new line

- A person class
make person called 'name' of age 'age' with 'colour' hair :
	"making a person object" ↲
	create
		'name' : 'name'
		'age' : 'age'
		'hair' : 'colour'

		getter/setter
			'age'

		getter
			'name'

		setter
			'hair'

		MY 'age' : ; overwrites the 'age' getter
			'age' × 2

		MY 'age' 'years' : ; overwrites the 'age' setter
			'age' : 'years' + 100

		print person ME :
			'name',", age ",'age',", hair ",'hair' ↲
			private add to 'age'

		private add to 'age' :
			'age' : 'age' + 1

- Another class
another class with same method name :
	create
		print person ME :
			"'I' am anonymous." ~

		call ME :
			print person ME
			" From another method." ↲

'Robert' : make person called "Robert" of age 64 with "grey" hair
{ 'Robert'’s 'name', " ", 'Robert'’s 'age'} ↲
print person 'Robert'
'Stephanie' : make person called "Stephanie" of age 61 with "brown" hair
print person 'Stephanie'
print person 'Robert'
print person 'Stephanie'
'Stephanie'’s 'name', " ", 'Stephanie'’s 'age' ↲

print person (another class with same method name). new line
'Robert'’s 'age' : 11. 'Robert'’s 'hair' : "blue"
print person 'Robert'
'Robert'’s 'name', " ", 'Robert'’s 'age' ↲ ; possessives are no longer syntactic sugar
-'Robert' 'name', " ", 'Robert' 'age' ↲ ; so these two lines are the same

'copy' : another class with same method name
call 'copy'

repeat
	"hi" _
... 5 times. new line

'I' : 1
repeat ['I' _. 'I' : 'I' + 1] until ['I' = 10]
'result' : while
	'I' ≥ 0
… do
	'I' _. 'I' : 'I' - 1

'result' ↲ ; this prints -1

'A' : {
	1
	2
	3
	4
}

for each 'item' in 'A' do
	'item' _

'person' : {"name" : "Robert", "age" : 65}
'person' ↲
'person'{"name"} : "blah"
'person' ↲