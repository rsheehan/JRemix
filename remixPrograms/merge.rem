my-list : apply [random 100] 80 times
my-list ↲

sort (my-list) from 1 to (length of (my-list))
my-list ↲

============
 Merge sort
============

sort (list) from (start) to (finish) :
	if (start ≥ finish)
		return
	middle : ((finish - start) ÷ 2) + start
	sort (list) from (start) to (middle)
	sort (list) from (middle + 1) to (finish)
	merge (list) from (start) to (middle) to (finish)

merge (list) from (start) to (middle) to (finish) :
	left : start
	right : middle + 1
	working-list : {}
	- while values on both sides
	while [(left ≤ middle) and (right ≤ finish)] do
		if (list{left} ≤ list{right})
			append (list{(left)++}) to (working-list)
		… otherwise
			append (list{(right)++}) to (working-list)
	- remaining values on the left
	if (left ≤ middle)
		for each (item) in (list) from position (left) to (middle) do
			append (item) to (working-list)
	- remaining values on the right
	if (right ≤ finish)
		for each (item) in (list) from position (right) to (finish) do
			append (item) to (working-list)
	- put back in original list
	for each (item) from (start) to (finish) do
		list{item} : working-list{(item - start) + 1}
