my-List : apply [random 100] 80 times
my-List ↲

merge-sort my-List
my-List ↲

============
 Merge sort
============

merge-sort List :
	sort List from 1 to (length of List)

sort List from Start to Finish :
	if (Start ≥ Finish)
		return
	Middle : Start + (Finish - Start) ÷ 2
	sort List from Start to Middle
	sort List from (Middle + 1) to Finish
	merge List from Start to Middle to Finish

merge List from Start to Middle to Finish :
	Left : Start
	Right : Middle + 1
	working-List : {}
	- while values on both sides
	while [(Left ≤ Middle) and (Right ≤ Finish)] do
		if (List {Left} ≤ List {Right})
			append (List {Left inc}) to working-List
		… otherwise
			append (List {Right inc}) to working-List
	- remaining values on the Left
	if (Left ≤ Middle)
		for each Item in List from position Left to Middle do
			append Item to working-List
	- remaining values on the Right
	if (Right ≤ Finish)
		for each Item in List from position Right to Finish do
			append Item to working-List
	- put back in original List
	for each Item from Start to Finish do
		List {Item} : working-List {Item - Start + 1}
