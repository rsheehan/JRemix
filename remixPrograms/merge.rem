MY-LIST : apply [random 100] 80 times
MY-LIST ↲

merge-sort MY-LIST
MY-LIST ↲

============
 Merge sort
============

merge-sort LIST :
	sort LIST from 1 to (length of LIST)

sort LIST from START to FINISH :
	if (START ≥ FINISH)
		return
	MIDDLE : START + (FINISH - START) ÷ 2
	sort LIST from START to MIDDLE
	sort LIST from (MIDDLE + 1) to FINISH
	merge LIST from START to MIDDLE to FINISH

merge LIST from START to MIDDLE to FINISH :
	LEFT : START
	RIGHT : MIDDLE + 1
	WORKING-LIST : {}
	- while values on both sides
	while [(LEFT ≤ MIDDLE) and (RIGHT ≤ FINISH)] do
		if (LIST {LEFT} ≤ LIST {RIGHT})
			append (LIST {LEFT inc}) to WORKING-LIST
		… otherwise
			append (LIST {RIGHT inc}) to WORKING-LIST
	- remaining values on the LEFT
	if (LEFT ≤ MIDDLE)
		for each ITEM in LIST from position LEFT to MIDDLE do
			append ITEM to WORKING-LIST
	- remaining values on the RIGHT
	if (RIGHT ≤ FINISH)
		for each ITEM in LIST from position RIGHT to FINISH do
			append ITEM to WORKING-LIST
	- put back in original LIST
	for each ITEM from START to FINISH do
		LIST {ITEM} : WORKING-LIST {ITEM - START + 1}
