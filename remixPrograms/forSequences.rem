- For loops and sequences -

'list'     : { 1, 2, 4, 8 }
'range'    : 5 to 10
'string'   : "abcdefg"
'map'      : { "x" : 2, "y" : 6, "z": 10, "a" : 15 }
'sequence' : make 4 star sequence

make 'N' star sequence :
	- the sequence object
	- must include "start ME" and "MY length" methods
	create
		'count' : 'N'

		start ME :
			'count' star iterator

		MY length :
			'count'

		- this is optional for specific item access
		'position' in ME :
			'iterator' : 'count' star iterator
			repeat 'position' times
				next 'iterator'

'count' star iterator :
	- the iterator object
	- must include an "end ME" and a "next ME" method
	- can refer to sequence instance variables e.g. "'count'"
	- but only in the instance variable assignment section
	create
		'MAX'   : 'count'
		'index' : 0
		'stars' : ""

		end ME :
			'index' = 'MAX'

		next ME :
			increment 'index'
			'stars' : 'stars' ⊕ "*"

'list' ↲
'range' ↲
'string' ↲
'map' ↲
'sequence' ↲

for each 'item' in 'list' do
	'item' _
↲
for each 'item' in 'range' do
	'item' _
↲
for each 'item' in 'string' do
	'item' _
↲
for each 'item' in 'map' do
	'item', ":", 'map' {'item'}, " " ~
↲
for each 'item' in 'sequence' do
	'item' _
↲
for each 'item' in 'list' from position 4 to 2 do
	'item' _
↲
for each 'item' in 'range' from position 4 to 2 do
	'item' _
↲
for each 'item' in 'string' from position 4 to 2 do
	'item' _
↲
for each 'item' in 'sequence' from position 4 to 2 do
	'item' _
↲
for each 'item' in 'list' keeping 'count' do
	'count', ":", 'item', " " ~
↲
for each 'item' in 'range' keeping 'count' do
	'count', ":", 'item', " " ~
↲
for each 'item' in 'string' keeping 'count' do
	'count', ":", 'item', " " ~
↲
for each 'item' in 'map' keeping 'count' do
	'count', ":", 'item', ":", 'map'{'item'}, " " ~
↲
for each 'item' in 'sequence' keeping 'count' do
	'count', ":", 'item', " " ~
