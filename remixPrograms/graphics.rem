Graphics : library "edu.fizz.remix.libraries.Graphics"

	=====================
	Dimensions and points
	=====================
	the std width :
		1000

	the std height :
		800

	the centre point :
		{the std width ÷ 2, the std height ÷ 2}

	/a random point :
		{random (the std width), random (the std height)}

	=======
	Colours
	=======
	white :
		{ 255, 255, 255 }
	black :
		{ 0, 0, 0 }
	red :
		{ 255, 0, 0 }
	green :
		{ 0, 255, 0 }
	blue :
		{ 0, 0, 255 }
	dark blue :
		{ 0, 0, 50 }
	sky blue :
		{ 180, 230, 255 }
	grey :
		{ 128, 128, 128 }
	dark grey :
		{ 64, 64, 64 }

	/a random colour :
		{ random 255, random 255, random 255 }

	======
	Shapes
	======

	a triangle :
		a 3 sided polygon

	a square :
		a 4 sided polygon

	a/an N sided polygon :
		Points : {}
		for each Side from 0 to (N - 1) do
			append {
				cosine (2π × Side ÷ N)
				sine (2π × Side ÷ N)
			} to Points
		a shape from Points scaled by 20

	a Colour box of Width x Height at Position :
		Left : -Width ÷ 2
		Right : Width ÷ 2
		Top : -Height ÷ 2
		Bottom : Height ÷ 2
		a Colour shape from {
			{ Left, Top }
			{ Right, Top }
			{ Right, Bottom }
			{ Left, Bottom }
		} scaled by 1 at Position

	a shape from Points scaled by Size :
		a (red) shape from Points scaled by Size at (the centre point)

	=-
	Create a shape of "Colour" from the list of "Points" scaled by "Size"
	at "Position".
	Shapes can be filled or just outlines.
	=-
	a Colour shape from Points scaled by Size at Position:

		create
			Colour         : Colour
			outline-Colour : null ; no outline
			Polygon        : Points
			Position       : Position
			Size           : Size
			Heading        : 0.0 ; radians

			getters/setters
				Colour, outline-Colour,
				Position, Size, Heading

			MY x-Pos :
				Position {1}

			MY y-Pos :
				Position {2}

			change MY x-pos by Δx :
				Position {1} : Position {1} + Δx

			change MY y-pos by Δy :
				Position {2} : Position {2} + Δy

			change MY heading by Δd degrees :
				Heading : Heading + Δd degrees as radians

	=====
	Lines
	=====

	=-
	Create a "Colour" line from "Start" to "Finish".
	The width is 3 pixels by default.
	=-
	a Colour line from Start to Finish :
		create
			Start : Start
			Finish : Finish
			Width : 3
			Colour : Colour

			getters/setters
				Start, Finish, Width, Colour

	a line from Start to Finish :
		a (green) line from Start to Finish

	a random line :
		a (random colour) line from (random point) to (random point)

	=======
	Circles
	=======

	=-
	Create a "Colour" circle of radius "Radius" at "Position".
	=-
	a Colour circle of radius Radius at Position :
		create
			Colour : Colour
			outline-Colour : null ; no outline
			Radius : Radius
			Position : Position

			getters/setters
				Colour, outline-Colour,
				Radius, Position

	a random circle :
		Size : random (the std height ÷ 8) + 10
		a (random colour) circle of radius Size at (random point)

	===============
	Graphic Windows
	===============

	=-
	Create and show a window with multiple shape layers.
	=-
	a window with shape layers :
		the-Window : create
			JWindow : a "Drawing" window of (the std width) by (the std height)
			Layers : { a shape layer } ; default bottom layer
			Background : dark blue

			getters
				Layers, Background

			MY Background Colour : ; this is a manual setter
				make the JWindow background Colour

			MY next layer :
				New-Layer : a shape layer
				append New-Layer to Layers
				New-Layer

			MY base layer :
				Layers {1}

			show ME :
				show JWindow

			update ME :
				clear all JWindow layers
				for each Layer in Layers do
					prepare Layer shapes for drawing on JWindow
				refresh JWindow

		show the-Window
		the-Window

	=-
	Create and show a window with only one shape layer.
	=-
	a simple window :

		extend (a window with shape layers)

			add Shape to ME :
				add Shape to (Layers {1})

			MY Shapes :
				Layers {1}'s Shapes

	=-
	Create a layered window with a "Background" colour.
	=-
	make a Background window :
		Window : a window with shape layers
		Window's Background : Background
		Window

	=-
	Create a shape layer.
	Shapes get added to layers.
	=-
	a shape layer :
		create
			Shapes : {}

			getter
				Shapes

			add Shape to ME :
				if (Shape is a "list")
					for each Part in Shape do
						append Part to Shapes
				… otherwise
					append Shape to Shapes

			clear MY shapes :
				Shapes : {}

			prepare MY shapes for drawing on JWindow :
				for each Shape in Shapes do
					add the Shape to the JWindow ; Java

	=========
	Animation
	=========

	=-
	Create an animation object which executes "Changes" every "N" ticks.
	=-
	every N tick/ticks /do [Changes] :
		create
			Ticks : N
			Counter : N
			Changes : Changes

			animate ME :
				dec Counter
				if (Counter = 0)
					Counter : Ticks
					do Changes

	=
	The Java animation function is
	animate at N ticks per second [Animation-Block] until [Condition-Block]
	=

	animate the-Window Number times at N ticks per second [Block] :
		Animation-Block : [
			do Block
			update the-Window
			dec Number
		]
		animate at N ticks per second Animation-Block until [Number < 1]

"Graphics library loaded." ↲
Graphics