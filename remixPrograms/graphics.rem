"Graphics library loading." ↲

library "edu.fizz.remix.libraries.Graphics"

	=====================
	Dimensions and points
	=====================
	the std width :
		1000

	the std height :
		800

	the centre point :
		{the std width ÷ 2, the std height ÷ 2}

	/a random point :
		{random (the std width), random (the std height)}

	=======
	Colours
	=======
	white :
		{255, 255, 255}
	black :
		{0, 0, 0}
	red :
		{255, 0, 0}
	green :
		{0, 255, 0}
	blue :
		{0, 0, 255}

	/a random colour :
		{random 255, random 255, random 255}

	======
	Shapes
	======

	a triangle :
		a 3 sided polygon

	a square :
		a 4 sided polygon

	a/an N sided polygon :
		Points : {}
		for each Side from 0 to (N - 1) do
			append {
				cosine (2π × Side ÷ N)
				sine (2π × Side ÷ N)
			} to Points
		a shape from Points

	=-
	Create a shape from the list of "points".
	=-
	a shape from Points :

		create
			Colour   : red
			Polygon  : Points
			Position : the centre point
			Size     : 20.0
			Heading  : 0.0 ; radians
			Filled   : true

			getters/setters
				Colour, Position, Size, Heading, Filled

			MY x-pos :
				Position {1}

			MY y-pos :
				Position {2}

			change MY x-pos by Δx :
				Position {1} : Position {1} + Δx

			change MY y-pos by Δy :
				Position {2} : Position {2} + Δy

			change MY heading by Δd degrees :
				Heading : Heading + Δd degrees as radians

	=====
	Lines
	=====

	a Colour line from Start to Finish :
		create
			Start : Start
			Finish : Finish
			Width : 3
			Colour : Colour

			getters/setters
				Start, Finish, Width, Colour

	a line from Start to Finish :
		a (green) line from Start to Finish

	a random line :
		a (random colour) line from (random point) to (random point)

	===============
	Graphic Windows
	===============

	=-
	Create and show a window with multiple shape layers.
	=-
	a window with shape layers :

		the-Window : create
			JWindow : a "Drawing" window of (the std width) and (the std height)
			Layers : { a shape layer } ; default bottom layer

			getter
				Layers

			MY next layer :
				New-Layer : a shape layer
				append New-Layer to Layers
				New-Layer

			MY base layer :
				Layers {1}

			show ME :
				show JWindow

			update ME :
				clear all JWindow layers
				for each Layer in Layers do
					prepare Layer shapes for drawing on JWindow
				refresh JWindow

		show the-Window
		the-Window

	=-
	Create and show a window with only one shape layer.
	=-
	a simple window :

		extend (a window with shape layers)

			add Shape to ME :
				add Shape to (Layers {1})

			MY shapes :
				Layers {1}'s Shapes

	=-
	Create a shape layer.
	Shapes get added to layers.
	=-
	a shape layer :
		create
			Shapes : {}

			getter
				Shapes

			add Shape to ME :
				append Shape to Shapes

			clear MY shapes :
				Shapes : {}

			prepare MY shapes for drawing on Window :
				for each Shape in Shapes do
					add the Shape to the Window ; Java

	=========
	Animation
	=========

	=-
	Create an animation object which executes "Changes" every "N" ticks.
	=-
	every N tick/ticks /do [Changes] :
		create
			Ticks : N
			Counter : N
			Changes : Changes

			animate ME :
				dec Counter
				if (Counter = 0)
					Counter : Ticks
					do Changes
