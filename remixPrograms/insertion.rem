List : apply [random 100] 400 times

"unsorted: ", List ↲

check for missing values in List
insertion sort List

"sorted: ", List ↲

----------

check for missing values in List :
	Count-of-values : apply [0] 100 times
	count each item in List into Count-of-values
	for each Item in Count-of-values keeping Count do
		if (Item = 0)
			Count, " is missing" ↲

count each item in List into Tally :
	for each Item in List do
		inc (Tally {Item})

================
 Insertion Sort
================

insertion sort List :
	for each Position from 2 to (length of List) do
		for each This from Position to 2 do
			swap if element to the left is greater than This in List

swap if element to the left is greater than This in List ::
- N.B. transparent short circuit
	Left : This - 1
	if (List {Left} > List {This})
		(List {Left}) swap (List {This})
	… otherwise
		return
