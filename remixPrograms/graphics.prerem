
"Graphics library loaded." ↲

library "edu.fizz.remix.libraries.Graphics"[

	=====================
	Dimensions and points
	=====================
	the std width :[
		1000]

	the std height :[
		800]

	the centre point :[
		{the std width ÷ 2, the std height ÷ 2}]

	/a random point :[
		{random (the std width), random (the std height)}]

	=======
	Colours
	=======
	white colour :[
		{255, 255, 255}]
	black colour :[
		{0, 0, 0}]
	red colour :[
		{255, 0, 0}]
	green colour :[
		{0, 255, 0}]
	blue colour :[
		{0, 0, 255}]

	random colour :[
		{random 255, random 255, random 255}]

	======
	Shapes
	======

	a triangle :[
		a 3 sided polygon]

	a square :[
		a 4 sided polygon]

	a/an (n) sided polygon :[
		points : {}
		for each (side) from 0 to (n - 1) do[
			append {[
				cosine (2π × side ÷ n)
				sine (2π × side ÷ n)]
			} to (points)]
		a shape from (points)]

	=-
	Create a shape from the list of "points".
	=-
	a shape from (points) :[

		create[
			colour   : red colour
			polygon  : points
			position : the centre point
			size     : 20.0
			heading  : 0.0 ; radians
			filled   : true

			getters/setters[
				colour, position, size, heading, filled]

			(my) x-pos :[
				position{1}]

			(my) y-pos :[
				position{2}]

			change (my) x-pos by (δ) :[
				position{1} : position{1} + δ]

			change (my) y-pos by (δ) :[
				position{2} : position{2} + δ]

			change (my) heading by (δ) degrees :[
				heading : heading + (δ) degrees as radians]]]

	=====
	Lines
	=====

	a (colour) line from (start) to (finish) :[
		create[
			start : start
			finish : finish
			width : 3
			colour : colour

			getters/setters[
				start, finish, width, colour]]]

	a line from (start) to (finish) :[
		a (green colour) line from (start) to (finish)]

	a random line :[
		a (random colour) line from (random point) to (random point)]

	===============
	Graphic Windows
	===============

	=-
	Create and show a window with multiple shape layers.
	=-
	a window with shape layers :[

		the-window : create[
			jwindow : a "Drawing" window of (the std width) and (the std height)
			layers : { a shape layer } ; default bottom layer

			getter[
				layers]

			(my) next layer :[
				new-layer : a shape layer
				append (new-layer) to (layers)
				new-layer]

			(my) base layer :[
				layers {1}]

			show (me) :[
				show (jwindow)]

			update (me) :[
				clear all (jwindow) layers
				for each (layer) in (layers) do[
					prepare (layer) shapes for drawing on (jwindow)]
				refresh (jwindow)]]

		show (the-window)
		the-window]

	=-
	Create and show a window with only one shape layer.
	=-
	a simple window :[

		the-window : extend (a window with shape layers)[

			add (shape) to (me) :[
				add (shape) to (layers{1})]

			(my) shapes : [; can be called by "window's shapes"
				layers{1}'s shapes]]]

	=-
	Create a shape layer.
	Shapes get added to layers.
	=-
	a shape layer :[
		create[
			shapes : {}

			getter[
				shapes]

			add (shape) to (me) :[
				append (shape) to (shapes)]

			clear (my) shapes :[
				shapes : {}]

			prepare (my) shapes for drawing on (window) :[
				for each (shape) in (shapes) do[
					add (shape) to (window) ]]]]; Java

	=========
	Animation
	=========

	=-
	Create an animation object which executes "changes" every "n" ticks.
	=-
	every (n) tick/ticks /do [changes] :[
		create[
			ticks : n
			counter : n
			changes : changes

			animate (me) :[
				dec (counter)
				if (counter = 0)[
					counter : ticks
					do (changes)]]]]]
