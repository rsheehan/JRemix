
"Graphics library loaded." ↲

library "edu.fizz.remix.libraries.Graphics"[

	=====================
	Dimensions and points
	=====================
	the std width :[
		1000]

	the std height :[
		800]

	the centre point :[
		{the std width ÷ 2, the std height ÷ 2}]

	/a random point :[
		{random (the std width), random (the std height)}]

	=======
	Colours
	=======
	white colour :[
		{255, 255, 255}]
	black colour :[
		{0, 0, 0}]
	red colour :[
		{255, 0, 0}]
	green colour :[
		{0, 255, 0}]
	blue colour :[
		{0, 0, 255}]

	random colour :[
		{random 255, random 255, random 255}]

	======
	Shapes
	======

	a triangle :[
		a 3 sided polygon]

	a square :[
		a 4 sided polygon]

	a/an N sided polygon :[
		POINTS : {}
		for each SIDE from 0 to (N - 1) do[
			append {[
				cosine (2π × SIDE ÷ N)
				sine (2π × SIDE ÷ N)]
			} to POINTS]
		a shape from POINTS]

	=-
	Create a shape from the list of "points".
	=-
	a shape from POINTS :[

		create[
			COLOUR   : red colour
			POLYGON  : POINTS
			POSITION : the centre point
			SIZE     : 20.0
			HEADING  : 0.0 ; radians
			FILLED   : true

			getters/setters[
				COLOUR, POSITION, SIZE, HEADING, FILLED]

			MY x-pos :[
				POSITION {1}]

			MY y-pos :[
				POSITION {2}]

			change MY x-pos by DX :[
				POSITION {1} : POSITION {1} + DX]

			change MY y-pos by DY :[
				POSITION {2} : POSITION {2} + DY]

			change MY heading by D degrees :[
				HEADING : HEADING + D degrees as radians]]]

	=====
	Lines
	=====

	a COLOUR line from START to FINISH :[
		create[
			START : START
			FINISH : FINISH
			WIDTH : 3
			COLOUR : COLOUR

			getters/setters[
				START, FINISH, WIDTH, COLOUR]]]

	a line from START to FINISH :[
		a (green colour) line from START to FINISH]

	a random line :[
		a (random colour) line from (random point) to (random point)]

	===============
	Graphic Windows
	===============

	=-
	Create and show a window with multiple shape layers.
	=-
	a window with shape layers :[

		THE-WINDOW : create[
			JWINDOW : a "Drawing" window of (the std width) and (the std height)
			LAYERS : { a shape layer } ; default bottom layer

			getter[
				LAYERS]

			MY next layer :[
				NEW-LAYER : a shape layer
				append NEW-LAYER to LAYERS
				NEW-LAYER]

			MY base layer :[
				LAYERS {1}]

			show ME :[
				show JWINDOW]

			update ME :[
				clear all JWINDOW layers
				for each LAYER in LAYERS do[
					prepare LAYER shapes for drawing on JWINDOW]
				refresh JWINDOW]]

		show THE-WINDOW
		THE-WINDOW]

	=-
	Create and show a window with only one shape layer.
	=-
	a simple window :[

		THE-WINDOW : extend (a window with shape layers)[

			add SHAPE to ME :[
				add SHAPE to (LAYERS {1})]

			MY shapes : [; can be called by "WINDOW's SHAPES"
				LAYERS {1}'s SHAPES]]]

	=-
	Create a shape layer.
	Shapes get added to layers.
	=-
	a shape layer :[
		create[
			SHAPES : {}

			getter[
				SHAPES]

			add SHAPE to ME :[
				append SHAPE to SHAPES]

			clear MY shapes :[
				SHAPES : {}]

			prepare MY shapes for drawing on WINDOW :[
				for each SHAPE in SHAPES do[
					add SHAPE to the WINDOW ]]]]; Java

	=========
	Animation
	=========

	=-
	Create an animation object which executes "CHANGES" every "N" ticks.
	=-
	every N tick/ticks /do [CHANGES] :[
		create[
			TICKS : N
			COUNTER : N
			CHANGES : CHANGES

			animate ME :[
				dec COUNTER
				if (COUNTER = 0)[
					COUNTER : TICKS
					do CHANGES]]]]]
