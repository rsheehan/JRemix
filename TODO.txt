Optimise "permanent" lines and shapes writing to a bitmap so that lots of lines don't have to be
drawn every window update. Currently turtles leave permanent lines as shapes in a layer which
all have to be redrawn.

Check that "extend"ing an object with a different method definition of an existing method still
allows non extended object method calls to work properly.

I could add a string following "create" and "extend" to store a type name with a Remix object.
Currently there is no unified way to determine the type except RemixObject.

There is an inconsistency in the naming of some standard functions.
e.g.
for each #Item in Sequence /do [Block] :
apply [Block] to each #Item from List :
the "in" and "from"

Need to allow the editor to control (i.e. stop) animation or other background threads.

"create", "extend", "using" and "library" should only be keywords if in the correct syntax.
They should be usable as ordinary words in other places.

If X is not allocated a value (or is null) then
	X + 1
ends up giving X the value "false", this is a result of the binary expression.
Need to think through how to deal with binary expressions which have mismatched types.

When a library function shadows a previous library level function this should really be
pointed out to the programmer.

Tidy up EvalVisitor to remove duplicate code in CallParts and Expressions.

Think about ranges being used in multidimensional ListMaps. See GetElementExpression.

Allow operations to modify blocks. e.g. concatenation
Thus moving blocks into more first class object status.

Error messages required
=======================
Dealing with null (NULL?) returned values e.g.
distance from {0, 3} to {4, 0} â†² ; should be {"x":0, "y":3} etc