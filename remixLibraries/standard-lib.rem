	-====================-
==============================
 The Remix standard library
==============================
	-====================-

===================
Character constants
===================
EMPTY : ""
SPACE : " "
TAB : "	" ; this contains a tab character
CR : "
" ; this contains a carriage return character
WHITE-SPACE : { SPACE, TAB, CR }

==============================
 Simple print functions
==============================

=-
Print a new line character.
=-
new line :
	↲

=-
Print the 'value' followed by a space.
=-
'value' _ :
	print 'value'
	print SPACE

==============================
 Boolean functions
==============================

=-
Negate the 'value'.
=-
not 'value' :
	if 'value'
		return false
	true

=-
The boolean "and" operation.
=-
'A' and 'B' :
	if (not 'A')
		return false
	if (not 'B')
		return false
	true

=-
The boolean "or" operation.
=-
'A' or 'B' :
	if 'A'
		return true
	if 'B'
		return true
	false

=-
Returns true if any block item in 'list' is true.
=-
any of 'list' :
	for each 'block' in 'list'
		if 'block'
			return true
		false

=-
Returns true if each block item in 'list' is true.
=-
all of 'list' :
	for each 'block' in 'list'
		if (not 'block')
			return false
		true

=-
Only returns true if each block item in 'list' is false.
=-
none of 'list' :
	for each 'block' in 'list'
		if 'block'
			return false
		true

==============================
 Looping functions
==============================

=-
Run 'block' for each 'item' in the 'sequence'.
'block' will usually use the variable passed as 'item'.
Return either the last statement value or whatever is returned from 'block'.
A sequence here is a list, range, map, string or sequence object.
=-
for each #item in 'sequence' ['block'] :
	'pos' : start 'sequence'
	do
		if (end 'pos')
			return 'last'
		#item : next 'pos'
		- A return in the 'block' following breaks out of the loop, with its result.
		'last' : do 'block'
		redo

=-
Run 'block' for each 'number' from 'start' to 'finish'.
=-
for each #number from 'start' to 'finish' ['block'] :
	for each #number in ('start' to 'finish')'block'

=-
Run 'block' for each 'number' from 'start' to 'finish' in steps of 'step'.
'step' is coerced to be positive if 'start' ≤ 'finish' otherwise negative.
=-
for each #number from 'start' to 'finish' in steps of 'step' ['block']:
	if ('start' ≤ 'finish')
		'test' : [#number ≤ 'finish']
		'step' : |'step'|
	… otherwise
		'test' : [#number ≥ 'finish']
		'step' : -|'step'|
	#number : 'start'
	while 'test'
		'last' : do 'block'
		#number : #number + 'step'
	'last'

=-
Run 'block' for each 'item' in the 'sequence' at all positions from 'start' to 'finish'.
'start' to 'finish' can go backwards.
'block' will usually use the variable passed as 'item'.
A sequence here is a list, range, string or sequence object with a 'pos' in 'sequence' method.
=-
for each #item in 'sequence' from position 'start' to 'finish' ['block'] :
	for each 'pos' from 'start' to 'finish'
		#item : 'pos' in 'sequence'
		do 'block'

=-
Run 'block' for each 'item' in the 'sequence' keeping count in 'count'.
A sequence here is a list, range, map, string or sequence object.
=-
for each #item in 'sequence' keeping #count ['block'] :
	#count : 0
	for each #item in 'sequence'
		increment #count
		do 'block'

=-
Repeat the 'block' for ever.
=-
repeat ['block'] forever :
	do 'block'
	redo

=--
Repeat the 'block' 'count' number of times.
=-
repeat ['block'] 'count' times :
	if ('count' ≤ 0)
		return 'last' ; none if unassigned
	'last' : do 'block'
	'count' : 'count' - 1
	redo

=-
Repeat the 'block' 'count' number of times.
=-
repeat 'count' times ['block'] :
	repeat 'block' 'count' times

=-
Repeat the 'block' until the 'condition' is true.
=-
repeat ['block'] until ['condition'] :
	'last' : do 'block'
	if 'condition'
		return 'last'
	redo

=-
While a 'condition' is true keep doing 'block'.
=-
while ['condition'] ['block'] :
	if (not 'condition')
		return 'last'
	'last' : do 'block'
	redo

==============================
 List create functions
==============================

=-
Filter 'list' using 'condition block' on each 'item' keeping 'keep block'.
The Blocks commonly refer to 'item'.
=-
filter 'list' by #item where ['condition block'] keeping ['keep block'] :
	'new list' : { }
	for each #item in 'list'
		if 'condition block'
			append (do 'keep block') to 'new list'
	'new list'

=-
Filter 'list' using 'condition block' on each 'item'.
The 'block' commonly refers to 'item'.
=-
filter 'list' by #item where ['condition block'] :
	filter 'list' by #item where 'condition block' keeping [#item]

=-
Collect Items from 'list' until 'condition' is true.
The 'condition' is checked before adding the 'item'.
=-
keep #item from 'list' until ['condition'] :
	'new list' : { }
	for each #item in 'list'
		if 'condition'
			return
		append #item to 'new list'
	'new list'

=-
Collect Items from 'list' where 'condition' is true,
stopping when 'termination' becomes true.
The conditions are checked before adding the 'item'.
=-
keep #item from 'list' where ['condition'] until ['termination'] :
	'result' : { }
	for each #item in 'list'
		if 'termination'
			return
		if 'condition'
			append #item to 'result'
	'result'

=-
Create a new 'list' by applying 'block' to each element of 'list'.
'block' will usually use the variable passed as 'item'.
=-
apply ['block'] to each #item from 'list' :
	'new list' : { }
	for each #item in 'list'
		append (do 'block') to 'new list'
	'new list'

=-
Create a new 'list' by applying 'block' 'N' times.
=-
apply ['block'] 'N' times :
	'new list' : { }
	repeat
		append (do 'block') to 'new list'
	… 'N' times
	'new list'

==============================
 List reduce functions
==============================

=-
Can be used to construct 'list' reduce functions.
'initial' is executed first.
Then each 'item' in the 'sequence' is executed in the 'block'.
A sequence here is a list, range, map, string or sequence object.
=-
starting with ['initial'] apply ['block'] on each #item in 'sequence' :
	do 'initial'
	for each #item in 'sequence''block'

=-
'sum' the 'list' values.
=-
sum 'list' :
	starting with
		'sum' : 0
	… apply
		add 'number' to 'sum'
	… on each 'number' in 'list'

=-
Multiply the 'list' values.
=-
product 'list':
	starting with
		'product' : 1
	… apply
		multiply 'product' by 'number'
	… on each 'number' in 'list'

=-
Find the average of the elements in the 'list'.
=-
average of 'list' :
	starting with
		'sum' : 0.0
	… apply
		add 'item' to 'sum'
	… on each 'item' in 'list'
	'sum' ÷ ('list' length)

=-
Find the average of 'key' elements in the 'list of maps'.
The 'key' should be passed as a string.
=-
average 'key' of 'list of maps' :
	starting with
		'sum' : 0.0
	… apply
		add ('map' {'key'}) to 'sum' ; with the change to quoted variables
	… on each 'map' in 'list of maps'
	'sum' ÷ ('list of maps' length)

=-
Join the contents of 'list 1' and 'list 2'.
The original lists remain unchanged.
=-
join 'list 1' and 'list 2' :
	starting with
		'list' : copy 'list 1'
	… apply
		append 'item' to 'list'
	… on each 'item' in 'list 2'

==============================
 String functions
==============================

=-
Concatenate the 'string' 'N' times.
=-
'string' 'N' times :
	if ('N' < 1) ; useful if 'N' is zero
		return EMPTY
	'result' : 'string'
	repeat
		'result' : 'result' ⊕ 'string'
	… ('N' - 1) times
	'result'

=-
Adds an 's' to 'word' if plural, 'number' > 1.
=-
pluralize 'word' for 'number' :
	if ('number' > 1)
		'word' ⊕ "s"
	… otherwise
		'word'

=-
Return a substring from 'string' from positions 'start' to 'finish'
inclusive.
'start' and 'finish' must be within the range of the string.
Can reverse the order if 'start' > 'finish'.
=-
'string' from 'start' to 'finish' :
	'result' : EMPTY
	'length' : 'string' length
	if (any of {
		['start' < 1]
		['finish' < 1]
		['start' > 'length']
		['finish' > 'length']
	})
		return 'result'
	for each 'char' in 'string' from position 'start' to 'finish'
		'result' : 'result' ⊕ 'char'

=-
Inserts or overwrites 'this string' into 'string' at position 'pos'.
Overwrites if 'overwrite' is true, otherwise inserts.
=-
place 'this string' into #string at 'pos' overwrite 'overwrite' :
	'left' : if ('pos' > #string length)
		#string
	… otherwise
		#string from 1 to ('pos' - 1)
	'right start' : if 'overwrite'
		'pos' + 'this string' length
	… otherwise
		'pos'
	'right' : #string from 'right start' to (#string length)
	'spaces'  : SPACE ('pos' - #string length - 1) times
	#string : 'left' ⊕ 'spaces' ⊕ 'this string' ⊕ 'right'

=-
Inserts 'this string' into 'string' starting at position 'pos'
moving characters to the right as necessary.
If the position is greater than the last position in the string it adds
necessary spaces before concatenating the insertion.
=-
insert 'this string' into #string at 'pos' :
	place 'this string' into #string at 'pos' overwrite false

=-
Overwrites 'this string' into 'string' starting at position 'pos'.
If the position is greater than the last position in the string it adds
necessary spaces before concatenating the insertion.
=-
overwrite 'this string' into #string at 'pos' :
	place 'this string' into #string at 'pos' overwrite true

==============================
 List string functions
==============================

=-
Joins the string versions of the elements in 'list'.
=-
join 'list' :
	'string' : EMPTY
	for each 'item' in 'list'
		'string' : 'string' ⊕ 'item'

=-
Joins the 'list' with 'separator' between elements.
=-
join 'list' with separator 'separator' :
	'string' : EMPTY
	for each 'item' in 'list' keeping 'count'
		if ('count' = 'list' length)
			return 'string' ⊕ ('item' as string)
		'string' : 'string' ⊕ ('item' as string) ⊕ 'separator'

=-
The 'list' as a string.
=-
'list' as string :
	if (not ('list' is a "list"))
		return 'list'
	"{" ⊕ join 'list' with separator ", " ⊕ "}"

==============================
 List functions
==============================

=-
Append 'value' to the end of 'list'.
=-
to 'list' append 'value' :
	append 'value' to 'list'

=-
The first 'value' in the 'list'.
=-
first in 'list' :
	'list' {1}

=-
The last 'value' in the 'list'.
=-
last in 'list' :
	'list' {'list' length}

=-
Is the 'sequence' empty?
A sequence here is a list, range, map, string or sequence object.
=-
no/empty 'sequence' :
	'sequence' length = 0

=-
Choose a random item from the 'list'.
=-
choose from 'list' :
	'list' {random ('list' length)}

=-
Is the 'element' in the 'list'?
=-
'element' is in 'list' :
	for each 'item' in 'list'
		if ('element' = 'item')
			return true
		false

=-
The 'list' does not contain the 'element'.
=-
'element' is not in 'list' :
	not ('element' is in 'list')

==============================
 Map functions
==============================

=-
Merge the 'extra' map into 'map'.
'map' is modified.
=-
merge 'extra' into 'map' :
	for each 'item' in 'extra'
		'map' {'item'} : 'extra' {'item'}

==============================
 Selection functions
==============================

=-
Executes statements in 'block'.
These statements are usually "[] do []"
The difference between "when" and "do" - "when" is not transparent.
=-
when ['block'] :
	do 'block'

=-
If 'option' 'block' is true, return executed 'result'.
Used in a "when" 'block'.
The transparent return breaks out of the "when".
=-
/this ['option'] do ['result'] ::
	if (do 'option')
		return do 'result'

==============================
 Numeric functions
==============================

=-
Increment numeric variable "X".
=-
inc/increment #X :
	#X : #X + 1

=-
Decrement numeric variable "X".
=-
dec/decrement #X :
	#X : #X - 1

=-
Increment numeric variable "X".
Return the previous value.
=-
#X inc/increment :
	#X : #X + 1
	#X - 1

=-
Increment numeric variable "X" by 'I'.
Return the previous value.
=-
#X inc/increment by 'I' :
	#X : #X + 'I'
	#X - 'I'

=-
Decrement numeric variable "X".
Return the previous value.
=-
#X dec/decrement :
	#X : #X - 1
	#X + 1

=-
Decrement numeric variable "X" by 'I'.
Return the previous value.
=-
#X dec/decrement by 'I' :
	#X : #X - 'I'
	#X + 'I'

=-
Add 'value' to variable "X".
=-
add 'value' to #X :
	#X : #X + 'value'

=-
Subtract 'value' from variable "X".
=-
subtract 'value' from #X :
	#X : #X - 'value'

=-
Multiply variable "X" by 'value'.
=-
multiply #X by 'value' :
	#X : #X × 'value'

=-
Divide variable "X" by 'value'.
=-
divide #X by 'value' :
	#X : #X ÷ 'value'

=-
The absolute value of 'number'.
=-
abs/| 'number' /| :
	if ('number' < 0)
		return -'number'
	'number'

=-
Is 'number' divisible by 'div'?
=-
'number' is divisible by 'div' :
	return 'number' % 'div' = 0

=-
A random integer from 'start' to 'finish' inclusive.
=-
random from 'start' to 'finish' :
	if ('start' < 'finish')
		return random ('finish' - 'start' + 1) + 'start' - 1
	random ('start' - 'finish' + 1) + 'finish' - 1

=-
The square of 'number'.
=-
'number' squared/sqrd/²:
	'number' × 'number'

=-
Return true 50% of the time.
=-
coin toss heads :
	if (random 2 = 1)
		return true
	false

=-
The Euclidean distance from 'A' to 'B'.
'A' and 'B' are 2 element lists or map values with keys "x" and "y".
=-
distance from 'A' to 'B' :
	if ('A' is a "list")
		'A' : xy map from 'A'
	if ('B' is a "list")
		'B' : xy map from 'B'
	'δx' : 'B' {"x"} - 'A' {"x"}
	'δy' : 'B' {"y"} - 'A' {"y"}
	√('δx'² + 'δy'²)

=-
Return xy map from 2 element 'list'
=-
xy map from 'list':
	{ "x" : 'list' {1}, "y" : 'list' {2} }

=-
Radian equivalent of 'angle' degrees.
=-
'angle' degrees as radians :
	'angle' ÷ 180.0 × π

=-
Degree equivalent of 'angle' radians.
=-
'angle' radians as degrees :
	'angle' ÷ π × 180.0

==============================
 Swapping functions
==============================

=-
Swap 'A' with 'B'.
=-
#A swap #B :
	'temp' : #A
	#A : #B
	#B : 'temp'

=
Swap 'list' element 'this' with 'that'.
'list' can be a list or map.
'this' and 'that' are indexes or keys.
-
swap 'list' element 'this' with 'that' :
	'temp' : 'list' {'this'}
	'list' {'this'} : 'list' {'that'}
=	'list' {'that'} : 'temp'

==============================
 Testing functions
==============================

=-
Create a test of 'code' with expected 'result' described by 'description'.
=-
'description' ['code'] expected 'result' :
	{ "description" : 'description', "code" : 'code', "expected" : 'result' }

=-
Create a test of 'code' with expected 'result'.
=-
['code'] expected 'result' :
	EMPTY 'code' expected 'result'

=-
Make a group of tests out of 'list of tests' and run all tests.
=-
test 'list of tests' :
	'test object' : create
		'tests' : 'list of tests'
		'passing' : 0
		'failing' : 0

		assert test 'number' 'description' ['code'] produces 'expected' :
			if ('description' ≠ EMPTY)
				"\"", 'description', "\"" ↲
			… otherwise
				"test #", 'number' ↲

			'result' : do 'code'

			if ('result' = 'expected')
				increment 'passing'
				"  Passed" ↲
			… otherwise
				increment 'failing'
				"  Failed: produces ", 'result', ", should be ", 'expected' ↲

		execute MY tests :
			"Starting tests: " ↲
			for each 'test' in 'tests' keeping 'test number'
				assert test 'test number' ('test' {"description"})
				… ('test' {"code"}) produces ('test' {"expected"})
			↲
			'test string' : 'tests' length ⊕ SPACE ⊕ (pluralize "test" for ('tests' length))
			'test string' ↲
			"=" ('test string' length) times ↲
			"expected : ", 'passing' ↲
			"failing : ", 'failing' ↲

	execute 'test object' tests

==============================
 Common library functions
==============================

graphics lib :
	include "remixLibraries/graphics.rem"

turtle lib :
	include "remixLibraries/turtle.rem"

- Can be used instead of "using graphics lib, turtle lib"
with turtle graphics ['block'] :
	using graphics lib, turtle lib
		do 'block' in lib context

files lib :
	include "remixLibraries/files.rem"

-==============================-

"Standard library loaded." ↲