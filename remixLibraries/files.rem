===========================
File Operations and Objects
===========================
library "edu.fizz.remix.libraries.RemixFiles"

	HOME : file directory (home)

	READING : "reading"
	WRITING : "writing"
	BOTH : "both"
	BINARY-READING : "bin reading"

	=-
	A file directory object based on 'directory name'.
	Can be used to access files inside the directory.
	=-
	file directory 'directory name':
		create
			'directory' : 'directory name' ⊕ path separator

			open file 'name' in ME :
				a file with full path ('directory' ⊕ 'name') for READING

			open file 'name' in ME for 'access' :
				a file with full path ('directory' ⊕ 'name') for 'access'

			ME to string :
				'directory'

	=-
	A file with full path 'name' opened for 'access' type access.
	'access' can be READING, WRITING, BOTH, BINARY-READING.
	=-
	a file with full path 'name' for 'access':
		create
			'name' : 'name'
			'access' : 'access'

			getter
				'access'

			read ME :
				if ('access' is in { READING, BOTH })
					return read file 'name' ; Java
				'name', " is not open for reading." ↲
				""

			write 'contents' to ME :
				if ('access' is in { WRITING, BOTH })
					return write 'contents' to file 'name' ; Java
				'name', " is not open for writing." ↲

			append 'contents' to ME :
				if ('access' is in { WRITING, BOTH })
					return write (read ME ⊕ 'contents') to file 'name'
				'name', " is not open for writing." ↲

			binary read ME :
				if ('access' = BINARY-READING)
					return read binary file 'name' ; Java

			ME to string :
				'name'

			=============================================
			Produces a sequence of lines from the 'file'.
			This can be used in for loops.
			=============================================
			lines from ME :
				create
					'file' : ME

					start ME :
						line iterator from 'file'

					ME to string :
						"sequence of lines from " ⊕ ('file' to string)

			=============================================
			Produces a sequence of words from the 'file'.
			This can be used in for loops.
			=============================================
			words from ME :
				create
					'file' : ME

					start ME :
						word iterator from 'file'

					ME to string :
						"sequence of words from " ⊕ ('file' to string)

			==================================================
			Produces a sequence of characters from the 'file'.
			This can be used in for loops.
			==================================================
			characters from ME :
				create
					'file' : ME

					start ME :
						character iterator from 'file'

					ME to string :
						"sequence of characters from " ⊕ ('file' to string)

			=============================================
			Produces a sequence of bytes from the 'file'.
			This can be used in for loops.
			=============================================
			bytes from ME :
				create
					'file' : ME

					start ME :
						byte iterator from 'file'

					ME to string :
						"sequence of bytes from " ⊕ ('file' to string)

	=-
	Create a line iterator from the 'file'.
	=-
	line iterator from 'file' :
		create
			'data' : read 'file'
			'position' : 0

			end ME :
				'position' = length of 'data'

			next ME :
				'line' : EMPTY
				'char' : EMPTY
				while [('position' ≠ length of 'data') and ('char' ≠ CR)]
					'char' : (increment 'position') in 'data'
					'line' : 'line' ⊕ 'char'

	=-
	Create a word iterator from the 'file'.
	=-
	word iterator from 'file' :
		create
			'data' : read 'file'
			'position' : 0

			end ME :
				throw away whitespace
				'position' = length of 'data'

			next ME :
				throw away whitespace
				'word' : EMPTY
				while ['position' ≠ length of 'data']
					'char' : (increment 'position') in 'data'
					if ('char' is in WHITE-SPACE)
						return 'word'
					'word' : 'word' ⊕ 'char'

			throw away whitespace :
				while ['position' ≠ length of 'data']
					'char' : (increment 'position') in 'data'
					if ('char' is not in WHITE-SPACE)
						decrement 'position'
						return

	=-
	Create a character iterator from the 'file'.
	=-
	character iterator from 'file' :
		create
			'data' : read 'file'
			'position' : 0

			end ME :
				'position' = length of 'data'

			next ME :
				(increment 'position') in 'data'

	=-
	Create a byte iterator from the 'file'
	Bytes from this are values from 0 to 255.
	=-
	byte iterator from 'file' :
		create
			'data' : binary read 'file'
			'position' : 0

			end ME :
				'position' = length of 'data'

			next ME :
				'value' : (increment 'position') in 'data'
				if ('value' < 0)
					'value' : 'value' + 256
				return 'value'

-============================================================================-

