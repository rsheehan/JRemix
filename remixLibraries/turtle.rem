=============================
'turtle' Operations and Objects
=============================
library

	=-
	Create a turtle space in 'the window'.
	'the window' is a graphics panel.
	A turtle space can have individual turtles or
	groups of turtles added to it.
	=-
	turtle space in 'the window':
		create
			'the window' : 'the window'
			'turtle rate' : 30
				- The 'turtle rate' was the number of frames per second.
				- Now it sets the time between parts of an unfinished
				- move command. See "move 'turtle' 'n' steps"

			getter
				'turtle rate'

			MY 'base-layer' :
				'the window'’s 'base-layer'

			=-
			Update the turtle space 'OBJECT'.
			=-
			update ME :
				update 'the window'

			=-
			Place the 'turtle' in the turtle space 'OBJECT'.
			=-
			place 'turtle' in ME :
				'turtle'’s 'turtle space' : ME
				'turtle'’s 'animation layer' : 'the window' next layer
				update 'the window'

			=-
			Place the 'turtle group' in the turtle space 'OBJECT'.
			=-
			place 'turtle group' group in ME :
				'turtle group'’s 'turtle space' : ME

			=-
			Clear the turtle space 'OBJECT'.
			This includes the base-layer of the space.
			This holds any pen marks left by the turtles.
			=-
			clear ME :
				clear 'the window'

			=-
			Clear all animation layers of the turtle space 'OBJECT'.
			Leaves the base-layer of the space.
			This holds any pen marks left by the turtles.
			Usually a similar effect to "hide turtles" but that leaves
			the turtles' animation layers.
			=-
			clear MY turtles :
				clear 'the window' leaving the base-layer

-==================================================================================================-

	================
	A turtle object.
	================

	=-
	Create a turtle.
	=-
	a turtle :
		'turtle shape' : shape from {
			{ 0, 1 }
			{-2, 2 }
			{ 0,-2 }
			{ 2, 2 }
		}

		'turtle' : extend 'turtle shape'
			'turtle space' : null
			'animation layer' : null ; its own animation layer
			'pen down' : true
			'visible' : true
			'speed' : 10

			getters/setters
				'speed'

			getter
				'animation layer'
				'pen down'

			setter
				'turtle space'

			=======================================
			Sets the animation layer for the turtle
			and places the turtle in the layer.
			=======================================
			MY 'animation layer' 'layer' : ; a setter for the 'animation layer'
				- this is called when a turtle is placed in a turtle space.
				'animation layer' : 'layer'
				place ME in 'animation layer'

			====================================================================
			'turtle' graphics have { 0, 0 } at the centre of the window
			and the heading is in degrees turning anticlockwise from the right.
			====================================================================

			MY 'position' :
				panel coordinate 'position' to turtle coordinate

			MY 'position' 'turtle coordinate' :
				'position' : turtle coordinate 'turtle coordinate' to panel coordinate

			MY 'heading' :
				('heading' radians as degrees) heading to direction

			MY 'heading' 'angle' :
				'heading' : ('angle' heading to direction) degrees as radians

			MY 'window position' : ; in panel coordinates not turtle coordinates
				'position'

			MY 'window position' 'the position' : ; in panel coordinates not turtle coordinates
				'position' : 'the position'

			=-
			Whether the turtle 'OBJECT' is visible.
			=-
			ME is visible :
				'visible'

			=-
			Hide the turtle 'OBJECT'.
			=-
			hide ME :
				'visible' : false
				if ('animation layer' ≠ null)
					clear 'animation layer' shapes
				update 'turtle space'

			=-
			Show the turtle 'OBJECT'.
			=-
			show ME :
				'visible' : true
				if ('animation layer' ≠ null)
					clear 'animation layer' shapes
					place ME in 'animation layer'
				update 'turtle space'

			=-
			Lower the turtle 'OBJECT' pen.
			=-
			MY pen down :
				'pen down' : true

			=-
			Raise the turtle 'OBJECT' pen.
			=-
			MY pen up :
				'pen down' : false

			=======================================
			Move the turtle instantly.
			Used as partial moves in animation.
			'start' and 'finish' are panel coordinates.
			=======================================
			=-
			Only used internally.
			=-
			instantly move ME from 'start' to 'finish' in 'destination layer' :
				clear 'animation layer' shapes
				if ('pen down')
					'line' : 'colour' line from 'start' to 'finish'
					place 'line' in 'destination layer'
				'position' : 'finish'
				if ('visible')
					place ME in 'animation layer'
				update 'turtle space'

			=-
			Move the turtle 'OBJECT' 'n' steps.
			=-
			move ME 'n' step/steps :
				'remaining' : 'n'
				'distance' : 0
				'start' : 'position' ; initial position
				while ['remaining' > 'speed']
					'distance' : 'distance' + 'speed'
					'finish' : MY position after moving 'distance' from 'start'
					instantly move ME from 'start' to 'finish' in 'animation layer'
					'remaining' : 'remaining' - 'speed'
					pause (1.0 ÷ 'turtle space'’s 'turtle rate') seconds
				- now add the "permanent" layer
				'finish' : MY position after moving 'n' from 'start'
				instantly move ME from 'start' to 'finish' in ('turtle space'’s 'base-layer')

			=-
			Move the turtle 'OBJECT' to the 'coordinate'.
			'coordinate' is a turtle point.
			=-
			move ME to 'coordinate' :
				turn ME to 'coordinate'
				'new position' : turtle coordinate 'coordinate' to panel coordinate
				move ME (distance from 'position' to 'new position') steps

			=-
			Turn the turtle 'OBJECT' by 'angle' degrees clockwise.
			=-
			turn ME 'angle' degrees/degree:
				add ('angle' degrees as radians) to 'heading'
				update 'turtle space'

			=-
			Turn the turtle 'OBJECT' to face the 'coordinate'.
			'coordinate' is a turtle point.
			=-
			turn ME to 'coordinate' :
				'finish' : turtle coordinate 'coordinate' to panel coordinate
				'δx' : 'finish' {1} - 'position' {1}
				'δy' : 'position' {2} - 'finish' {2}
				'heading' : π ÷ 2 - arc tangent 'δy' over 'δx'
				update 'turtle space'

			===============================================================
			Where the turtle would be after moving with the current heading
			from the starting position.
			===============================================================

			=-
			Only used internally.
			=-
			MY position after moving 'distance' from 'start' :
				'actual heading' : π ÷ 2 - 'heading'
				{
					'start' {1} + 'distance' × cosine ('actual heading')
					'start' {2} - 'distance' × sine ('actual heading')
				}

-==================================================================================================-

	================================
	A turtle group object.
	Together for parallel operation.
	================================

	=-
	Create a group of 'n' turtles.
	'turtles' in a turtle group can perform the same move and turn
	instructions simultaneously.
	They have a speed for the group.
	=-
	a group of 'n' turtles :
		if ('n' > 100)
			"turtle groups limited to 100." ↲
			'n' : 100
		'turtles' : apply [a turtle] 'n' times
		create
			'turtle space' : null
			'turtles' : 'turtles'
			'speed' : 10 ; this is for the group

			getter/setter
				'speed'

			=-
			Retrieve turtle 'n' from the turtle group 'OBJECT'.
			=-
			turtle 'n' from ME :
				'turtles' {'n'}

			===========================================
			Not only sets the turtle space but adds all
			turtles to it.
			===========================================
			MY 'turtle space' 'space' : ; a setter for 'turtle space'
				'turtle space' : 'space'
				for each 'turtle' in 'turtles'
					place 'turtle' in 'turtle space'

			====================================================
			Enable the turtle group to iterate over the turtles.
			====================================================
			start ME :
				create
					'turtles' : 'turtles'
					'index' : 0

					end ME :
						'index' = 'turtles' length

					next ME :
						'turtles' {increment 'index'}

			=-
			Move each turtle in the turtle group 'OBJECT' 'n' steps.
			Each turtle has its own heading, colour etc, but they all
			move the same distance.
			=-
			move ME 'n' step/steps :
				'remaining' : 'n'
				'distance' : 0
				'starting' : apply
					'turtle'’s 'window position'
				… to each 'turtle' from 'turtles'

				while ['remaining' > 'speed']
					'distance' : 'distance' + 'speed'
					for each 'turtle' in 'turtles' keeping 'index'
						'start' : 'starting' {'index'} ; initial position
						'finish' : 'turtle' position after moving 'distance' from 'start'
						instantly move 'turtle' from 'start' to 'finish' in ('turtle'’s 'animation layer')
					'remaining' : 'remaining' - 'speed'
					pause (1.0 ÷ 'turtle space'’s 'turtle rate') seconds
				- now add the "permanent" layer
				for each 'turtle' in 'turtles' keeping 'index'
					'start' : 'starting' {'index'}
					'finish' : 'turtle' position after moving 'n' from 'start'
					instantly move 'turtle' from 'start' to 'finish' in ('turtle space'’s 'base-layer')

			=================================================
			Turn each turtle in the group by the same amount.
			=================================================
			turn ME 'angle' degrees :
				for each 'turtle' in 'turtles'
					'turtle'’s 'heading' : 'turtle'’s 'heading' - 'angle'
				update 'turtle space'

			========================================
			Hide all the turtle bodies in the group.
			========================================
			hide ME :
				for each 'turtle' in 'turtles'
					hide 'turtle'

			========================================
			Show all the turtle bodies in the group.
			========================================
			show ME :
				for each 'turtle' in 'turtles'
					show 'turtle'

-==================================================================================================-

	=-
	Convert turtle heading "'angle'" to a direction (and vice versa).
	=-
	'angle' heading to direction :
		90 - 'angle'

	=-
	Convert panel coordinate "'coordinate'" to a turtle coordinate.
	=-
	panel coordinate 'coordinate' to turtle coordinate :
		{
			'coordinate' {1} - CENTRE-X
			CENTRE-Y - 'coordinate' {2}
		}

	=-
	Convert turtle coordinate "'coordinate'" to a panel coordinate.
	=-
	turtle coordinate 'coordinate' to panel coordinate :
		{
			'coordinate' {1} + CENTRE-X
			CENTRE-Y - 'coordinate' {2}
		}

	=-
	A random turtle coordinate.
	=-
	random turtle point :
		panel coordinate (random point) to turtle coordinate

-==================================================================================================-

