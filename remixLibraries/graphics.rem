===============================
Graphics Operations and Objects
===============================
'graphics library' : library "edu.fizz.remix.libraries.Graphics"

	=====================
	Dimensions and points
	=====================
	STD-WIDTH  : 1000
	STD-HEIGHT : 800
	CENTRE-X   : STD-WIDTH ÷ 2
	CENTRE-Y   : STD-HEIGHT ÷ 2
	THE-CENTRE-POINT : { CENTRE-X, CENTRE-Y }

	/a random point :
		{ random STD-WIDTH, random STD-HEIGHT }

	=======
	Colours
	=======
	WHITE     : { 255, 255, 255 }
	BLACK     : { 0, 0, 0 }
	RED       : { 255, 0, 0 }
	GREEN     : { 0, 255, 0 }
	BLUE      : { 0, 0, 255 }
	DARK-BLUE : { 0, 0, 50 }
	SKY-BLUE  : { 180, 230, 255 }
	GREY      : { 128, 128, 128 }
	DARK-GREY : { 64, 64, 64 }

	/a random colour :
		{ random 255, random 255, random 255 }

-==================================================================================================-

	================
	Graphics objects
	================

	======
	Shapes
	======

	=-
	Create a triangle.
	=-
	a triangle :
		a 3 sided polygon

	=-
	Create a square.
	=-
	a square :
		a 4 sided polygon

	=-
	Create an 'N' sided polygon.
	=-
	a/an 'N' sided polygon :
		'points' : { }
		for each 'side' from 0 to ('N' - 1) do
			append {
				cosine (2π × 'side' ÷ 'N')
				sine (2π × 'side' ÷ 'N')
			} to 'points'
		a shape from 'points' scaled by 20

	=-
	Create a box centred at 'position'
	with 'colour' and 'width' x 'height'.
	=-
	a/an 'colour' box of 'width' x 'height' at 'position' :
		'left'   : -'width' ÷ 2
		'right'  : 'width' ÷ 2
		'top'    : -'height' ÷ 2
		'bottom' : 'height' ÷ 2
		a 'colour' shape from {
			{ 'left', 'top' }
			{ 'right', 'top' }
			{ 'right', 'bottom' }
			{ 'left', 'bottom' }
		} scaled by 1 at 'position'

	=-
	Create a shape from the list of 'points'.
	The shape is scaled by 5.
	=-
	a shape from 'points' :
		a shape from 'points' scaled by 5

	=-
	Create a shape from the list of 'points' scaled by 'size'.
	=-
	a shape from 'points' scaled by 'size' :
		a RED shape from 'points' scaled by 'size' at THE-CENTRE-POINT

	=-
	Create a shape of 'colour' from the list of 'points' scaled by 'size'
	at 'position'.
	'shapes' can be filled or just outlines.
	=-
	a/an 'colour' shape from 'points' scaled by 'size' at 'position':

		extend a shape at 'position'
			'type'           : "shape"
			'colour'         : 'colour'
			'outline colour' : null ; no outline
			'polygon'        : 'points'
			'size'           : 'size'
			'heading'        : 0.0 ; radians

			getters/setters
				'colour', 'outline colour',
				'size', 'heading'

			getter
				'type'

			change MY heading by 'δd' degrees :
				add ('δd' degrees as radians) to 'heading'

	=-
	Create an object with a position.
	=-
	a shape at 'position' :
		create
			'position' : 'position'

			getter/setter
				'position'

			MY 'x-pos' : ; a fake getter
				'position'{1}

			MY 'y-pos' : ; a fake getter
				'position'{2}

			change MY x-pos by 'δx' :
				add 'δx' to ('position'{1})

			change MY y-pos by 'δy' :
				add 'δy' to ('position'{2})

	=====
	Lines
	=====

	=-
	Create a 'colour' line from 'start' to 'finish'.
	The width is 3 pixels by default.
	=-
	a/an 'colour' line from 'start' to 'finish' :
		create
			'type'   : "line"
			'start'  : 'start'
			'finish' : 'finish'
			'width'  : 3
			'colour' : 'colour'

			getters/setters
				'start', 'finish', 'width', 'colour'

			change MY x-pos by 'δx' :
				add 'δx' to ('start'{1})
				add 'δx' to ('finish'{1})

			change MY y-pos by 'δy' :
				add 'δy' to ('start'{2})
				add 'δy' to ('finish'{2})

	=-
	Create a green line from 'start' to 'finish'.
	=-
	a line from 'start' to 'finish' :
		a GREEN line from 'start' to 'finish'

	=-
	Create a random line.
	=-
	a random line :
		a (random colour) line from (random point) to (random point)

	=======
	Circles
	=======

	=-
	Create a 'colour' circle of radius 'radius' at 'position'.
	=-
	a/an 'colour' circle of radius 'radius' at 'position' :
		extend a shape at 'position'
			'type'     : "circle"
			'colour'   : 'colour'
			'outline colour' : null ; no outline
			'radius'   : 'radius'

			getters/setters
				'colour', 'outline colour',
				'radius'

	=-
	Create a random circle.
	=-
	a random circle :
		'size' : random (STD-HEIGHT ÷ 8) + 10
		a (random colour) circle of radius 'size' at (random point)

-==================================================================================================-

	===============
	Graphics Panels
	===============

	=-
	Open the graphic panel with multiple layers.
	Return the graphics panel.
	=-
	the graphics panel :
		an (open graphics panel) with layers

	===========================================================
	The Remix 'panel' for drawing in.
	It has a base-layer which is an image for permanent shapes,
	and multiple layers for animation on top of that.

	It can be the built-in panel from the Remix IDE or a panel
	in a graphics window created outside this.
	===========================================================
	=-
	Return a panel with multiple layers based on 'JGraphics panel'.
	=-
	a/an 'JGraphics panel' with layers :
		'panel' : create
			'JGraphics' : 'JGraphics panel'
			'layers' : { a base-layer for 'JGraphics panel' }
			'colour' : DARK-BLUE ; set by "MY 'colour' 'the colour'"

			getters
				'layers', 'background colour'

			MY 'colour' 'the colour' : ; this is a setter
				'colour' : 'the colour'
				make the 'JGraphics' background 'colour' ; Java

			MY next layer :
				'new layer' : a shape layer
				append 'new layer' to 'layers'
				'new layer'

			MY 'base-layer' :
				'layers' {1}

			==========================================
			Useful to place a shape in the base-layer.
			==========================================
			place 'shape' in ME :
				place 'shape' in ('layers' {1})

			update ME :
				clear transient 'JGraphics' layers ; Java
				for each 'layer' in 'layers' do
					prepare 'layer' shapes for drawing on 'JGraphics'
				refresh 'JGraphics' ; Java

			==================
			Clears all layers.
			==================
			clear ME :
				clear 'JGraphics' base-layer
				clear ME leaving the base-layer

			clear ME leaving the base-layer :
				make the 'JGraphics' background 'colour'
				'layers' : { 'layers' {1} }
				update ME

		clear 'panel'
		return 'panel'

	================
	Graphics Windows
	================
	=-
	Open a graphics window with multiple layers.
	Return the graphics panel.
	=-
	a graphics window :
		'JWindow' : a "Drawing" window of STD-WIDTH by STD-HEIGHT
		show 'JWindow' ; Java
		'JGraphics panel' : the 'JWindow' graphics panel ; Java
		a 'JGraphics panel' with layers

	=-
	Create a shape layer.
	'shapes' get added to layers.
	This does not include the base-layer which is special.
	Animations should be placed in ordinary shape layers.
	=-
	a shape layer :
		create
			'shapes' : { }

			getter
				'shapes'

			place 'shape' in ME :
				if ('shape' is a "list")
					for each 'part' in 'shape' do
						append 'part' to 'shapes'
				… otherwise
					append 'shape' to 'shapes'

			clear MY shapes :
				'shapes' : { }

			prepare MY shapes for drawing on 'JGraphics' :
				for each 'shape' in 'shapes' do
					add the 'shape' to the 'JGraphics' ; Java

	=-
	Create a base-layer for the 'JGraphics panel'.
	'shapes' which get added to a base-layer are "permanent"
	until the layer gets cleared.
	Animations should not be placed in the base-layer.
	=-
	a base-layer for 'JGraphics panel' :
		create
			'JGraphics panel' : 'JGraphics panel' ; base layer can change so need this

			MY 'shapes' : ; a getter for shapes which are not stored
				{ }

			place 'shape' in ME :
				if ('shape' is a "list")
					for each 'part' in 'shape' do
						add the 'part' to the ('JGraphics panel' base-layer) image ; Java
				… otherwise
					add the 'shape' to the ('JGraphics panel' base-layer) image ; Java

			clear MY shapes :
				"Clearing shapes from the base-layer - does nothing."

			prepare MY shapes for drawing on 'JGraphics' :
				"Preparing shapes in the base-layer - does nothing."

-==================================================================================================-

	=========
	Animation
	=========

	=-
	Create an animation object which executes 'changes' every 'N' ticks.
	=-
	every 'N' tick/ticks /do ['changes'] :
		create
			'ticks' : 'N'
			'counter' : 'N'
			'changes' : 'changes'

			animate ME :
				decrement 'counter'
				if ('counter' = 0)
					'counter' : 'ticks'
					do 'changes'

	=======================================================================
	The Java animation function is
	animate at 'N' ticks per second [Animation-block] until [Condition-block]
	=======================================================================

	=-
	Animate 'block' in 'the window' at 'n' ticks per second.
	=-
	animate 'the window' 'number' times at 'n' ticks per second ['block'] :
		animate at 'n' ticks per second
			do 'block'
			update 'the window'
			decrement 'number'
		… until ['number' < 1]

-==================================================================================================-

"Graphics library loaded." ↲
'graphics library'