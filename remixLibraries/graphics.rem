Graphics-Lib : library "edu.fizz.remix.libraries.Graphics"

	=====================
	Dimensions and points
	=====================
	STD-WIDTH  : 1000
	STD-HEIGHT : 800
	CENTRE-X   : STD-WIDTH ÷ 2
	CENTRE-Y   : STD-HEIGHT ÷ 2
	THE-CENTRE-POINT : { CENTRE-X, CENTRE-Y }

	/a random point :
		{ random STD-WIDTH, random STD-HEIGHT }

	=======
	Colours
	=======
	WHITE     : { 255, 255, 255 }
	BLACK     : { 0, 0, 0 }
	RED       : { 255, 0, 0 }
	GREEN     : { 0, 255, 0 }
	BLUE      : { 0, 0, 255 }
	DARK-BLUE : { 0, 0, 50 }
	SKY-BLUE  : { 180, 230, 255 }
	GREY      : { 128, 128, 128 }
	DARK-GREY : { 64, 64, 64 }

	/a random colour :
		{ random 255, random 255, random 255 }

	======
	Shapes
	======

	a triangle :
		a 3 sided polygon

	a square :
		a 4 sided polygon

	a/an N sided polygon :
		Points : { }
		for each Side from 0 to (N - 1) do
			append {
				cosine (2π × Side ÷ N)
				sine (2π × Side ÷ N)
			} to Points
		a shape from Points scaled by 20

	a/an Colour box of Width x Height at Position :
		Left : -Width ÷ 2
		Right : Width ÷ 2
		Top : -Height ÷ 2
		Bottom : Height ÷ 2
		a Colour shape from {
			{ Left, Top }
			{ Right, Top }
			{ Right, Bottom }
			{ Left, Bottom }
		} scaled by 1 at Position

	a shape from Points :
		a shape from Points scaled by 5

	a shape from Points scaled by Size :
		a RED shape from Points scaled by Size at THE-CENTRE-POINT

	=-
	Create a shape of "Colour" from the list of "Points" scaled by "Size"
	at "Position".
	Shapes can be filled or just outlines.
	=-
	a/an Colour shape from Points scaled by Size at Position:

		create
			Type           : "shape"
			Colour         : Colour
			outline-Colour : null ; no outline
			Polygon        : Points
			Position       : Position
			Size           : Size
			Heading        : 0.0 ; radians

			getters/setters
				Colour, outline-Colour,
				Position, Size, Heading

			MY x-Pos :
				Position {1}

			MY y-Pos :
				Position {2}

			change MY x-pos by Δx :
				Position {1} : Position {1} + Δx

			change MY y-pos by Δy :
				Position {2} : Position {2} + Δy

			change MY heading by Δd degrees :
				Heading : Heading + Δd degrees as radians

	=====
	Lines
	=====

	=-
	Create a "Colour" line from "Start" to "Finish".
	The width is 3 pixels by default.
	=-
	a/an Colour line from Start to Finish :
		create
			Type   : "line"
			Start  : Start
			Finish : Finish
			Width  : 3
			Colour : Colour

			getters/setters
				Start, Finish, Width, Colour

	a line from Start to Finish :
		a GREEN line from Start to Finish

	a random line :
		a (random colour) line from (random point) to (random point)

	=======
	Circles
	=======

	=-
	Create a "Colour" circle of radius "Radius" at "Position".
	=-
	a/an Colour circle of radius Radius at Position :
		create
			Type     : "circle"
			Colour   : Colour
			outline-Colour : null ; no outline
			Radius   : Radius
			Position : Position

			getters/setters
				Colour, outline-Colour,
				Radius, Position

	a random circle :
		Size : random (STD-HEIGHT ÷ 8) + 10
		a (random colour) circle of radius Size at (random point)

	===============
	Graphics Panels
	===============

	=-
	Open the graphic panel with multiple layers.
	Return the graphics panel.
	=-
	the graphics panel :
		an (open graphics panel) with layers

	===========================================================
	The Remix Panel for drawing in.
	It has a base layer which is an image for permanent shapes,
	and multiple layers for animation on top of that.

	It can be the built-in panel from the Remix IDE or a panel
	in a graphics window created outside this.
	===========================================================
	a/an JGraphics-Panel with layers :
		Panel : create
			JGraphics : JGraphics-Panel
			Layers : { a base layer for JGraphics-Panel }
			Background-Colour : DARK-BLUE ; set by "MY Background Colour"

			getters
				Layers, Background-Colour

			MY Background-Colour Colour : ; this is a setter
				make the JGraphics background Colour ; Java
				Background-Colour : Colour

			MY next layer :
				New-Layer : a shape layer
				append New-Layer to Layers
				New-Layer

			MY base layer :
				Layers {1}

			==========================================
			Useful to place a shape in the base layer.
			==========================================
			place Shape in ME :
				place Shape in (Layers {1})

			update ME :
				clear transient JGraphics layers ; Java
				for each Layer in Layers do
					prepare Layer shapes for drawing on JGraphics
				refresh JGraphics ; Java

			==================
			Clears all layers.
			==================
			clear ME :
				clear JGraphics base-layer
				clear ME leaving base-layer

			clear ME leaving base-layer :
				make the JGraphics background Background-Colour
				Layers : { Layers{1} }
				update ME

		clear Panel
		return Panel

	================
	Graphics Windows
	================
	=-
	Open a graphics window with multiple layers.
	Return the graphics panel.
	=-
	a graphics window :
		JWindow : a "Drawing" window of STD-WIDTH by STD-HEIGHT
		show JWindow ; Java
		JGraphics-Panel : the JWindow graphics panel ; Java
		a JGraphics-Panel with layers

	=-
	Create a shape layer.
	Shapes get added to layers.
	This does not include the base-layer which is special.
	Animations should be placed in ordinary shape layers.
	=-
	a shape layer :
		create
			Shapes : { }

			getter
				Shapes

			place Shape in ME :
				if (Shape is a "list")
					for each Part in Shape do
						append Part to Shapes
				… otherwise
					append Shape to Shapes

			clear MY shapes :
				Shapes : { }

			prepare MY shapes for drawing on JGraphics :
				for each Shape in Shapes do
					add the Shape to the JGraphics ; Java

	=-
	Create a base layer.
	Shapes which get added to a base layer are "permanent".
	At least until the layer gets cleared.
	Animations should not be placed in the base layer.
	=-
	a base layer for JGraphics-Panel :
		create
			JGraphics-Panel : JGraphics-Panel

			MY Shapes : ; a getter for shapes which are not stored
				{ }

			place Shape in ME :
				if (Shape is a "list")
					for each Part in Shape do
						add the Part to the (JGraphics-Panel base-layer) base-layer; Java
				… otherwise
					add the Shape to the (JGraphics-Panel base-layer) base-layer; Java

			clear MY shapes :
				"Clearing shapes from the base layer - does nothing."

			prepare MY shapes for drawing on JGraphics :
				"Preparing shapes in the base layer - does nothing."

	=========
	Animation
	=========

	=-
	Create an animation object which executes "Changes" every "N" ticks.
	=-
	every N tick/ticks /do [Changes] :
		create
			Ticks : N
			Counter : N
			Changes : Changes

			animate ME :
				decrement Counter
				if (Counter = 0)
					Counter : Ticks
					do Changes

	=======================================================================
	The Java animation function is
	animate at N ticks per second [Animation-Block] until [Condition-Block]
	=======================================================================

	=-
	Animate "Block" in "the-Window" at "N" ticks per second.
	=-
	animate the-Window Number times at N ticks per second [Block] :
		animate at N ticks per second
			do Block
			update the-Window
			decrement Number
		… until [Number < 1]

"Graphics library loaded." ↲
Graphics-Lib